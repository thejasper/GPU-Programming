#include <iostream>
#include <vector>

#include "car.h"
#include "racecar.h"

using namespace std;

template <class T>
T *AllocateArray(int size)
{
    return new T[size];
}

int main()
{
    /*Write a template function that takes an integer, creates an array of type T of that size
      and returns it */
    int *arr = AllocateArray<int>(5);

    for (int i = 0; i < 5; ++i)
    {
        cout << arr[i] << ' ';
    }

    cout << endl;
    delete[] arr;
    /*Write a class definition for a car, with a few member variables, and some
      getter and setter methods for those member variables. Then, here in main, create
      an instance of that class, and call its methods.*/
    Car c(4, "Red");
    cout << c.getNumWheels() << endl;
    cout << c.getColor() << endl;
    /*Add a constructor to your car class.  Does it also need a destructor? */
    // It doesn't need a destructor because nothing is dynamically allocated
    /*Divide your class into a separate .h and .cpp file.  Make sure methods that should be
     constant are declared with "const". */
    // Done
    /*Create an object of your class using a pointer and dynamic allocation.  */
    Car *toyota = new Car(4, "Blue/Green");
    /*Get the size in bytes of your class (which is allocated on the heap). */
    cout << "Size of the class on the heap: " << sizeof(*toyota) << endl;
    /*Create a static member variable of your class.  Check if this changes the size of your class */
    cout << Car::getClassDescription() << endl;
    cout << "Size of the class on the heap: " << sizeof(*toyota) << endl;
    // It doens't change the size
    /*If you had a copy constructor or operator= method, would they need to explicitly copy any
      of your class's member variables? */
    Car other(c);
    other.setColor("Yellow");
    cout << other.getColor() << endl;
    cout << c.getColor() << endl;
    // copy constructor is generated by default
    // if you provide your own you would have to explicitly copy it
    /*Think of a possible class that could be derived from your car class.
      What would its member variables be? */
    RaceCar ferrari(4, "Orange", "Superspeed");
    cout << ferrari.getEngineType() << endl;
    return 0;
}

